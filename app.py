import json
from pymongo import MongoClient
# import requests
from flask import Flask
from flask import request
from flask_restplus import Resource, Api
from flask_restplus import fields
from flask_restplus import inputs
from flask_restplus import reqparse
import re
import random



# Helper Functions
app = Flask(__name__)
api = Api(app)

<<<<<<< Updated upstream
=======

def updateEntry(record, collection, query):
    collection.update(query, record)

def intersection(lst1, lst2):
    output_list = []
    for i1 in lst1:
        for i2 in lst2:
            #print(i1)
            #print(i2)
            if i1.lower() == i2.lower():
                output_list.append(i1)
    #print(output_list)            
    return output_list            

>>>>>>> Stashed changes
# Setup parser
parser = reqparse.RequestParser()
parser.add_argument('energy', type=int)


# GET http://127.0.0.1:5000/exercises?energy=LOW where LOW is a constant LOW=3 and HIGH=6

@api.route('/exercises')
class AllCollections(Resource):
    @api.expect(parser)
    def get(self):

        # Obtain energy entry
        args = parser.parse_args()
        energy = args['energy']

        # Connect to mongodb mlab
        mongo_port = 27107
        db_name = 'comp4920'
        collection_name = 'exercises'
        mongo_host = "mongodb://admin:admin123@ds331558.mlab.com:31558/comp4920"
        client = MongoClient(host=mongo_host, port=mongo_port)
        db = client[db_name]
        exercises = db[collection_name]

        # Obtain collection
        collection = db.exercises.find()

        output_list = []

        # Abort if collection not found
        if not collection:
            api.abort(404, "There are no collections in the database")

        # For testing, print out all records
        for record in collection:
            # print(record)
            exercise_id = record['id']
            exercise_name = record['exercise']
            description = record['description']
            output_dict = {
                "id": exercise_id,
                "exercise": exercise_name,
                "description": description
            }
            output_list.append(output_dict)
        # print(output_list)

<<<<<<< Updated upstream
        if energy:
            random.shuffle(output_list)
            return output_list[:energy], 200
        else:
            return output_list, 200
=======
# returns list of all users
@api.route('/users')
class UserCollection(Resource):
    #@api.expect(parser)
    def get(self):

        # Connect to mongodb mlab
        mongo_port = 27107
        db_name = 'comp4920'
        collection_name = 'users'
        mongo_host = "mongodb://admin:admin123@ds331558.mlab.com:31558/comp4920"
        client = MongoClient(host=mongo_host, port=mongo_port)
        db = client[db_name]
        users = db[collection_name]

        # Obtain collection
        collection = db.users.find()

        # Abort if collection not found
        if not collection:
            api.abort(404, "There are no collections in the database")

        output_list = []
        output_id_list = [] # list of exercise ids only  
        for record in collection: 
            output_dict = {
                "username": record['username'],
                "password": record['password']
            }
            output_list.append(output_dict)   
        return output_list, 200 

@api.route('/users/<str:username>')
class User(Resource):
    def get(self, username):
        # Connect to mongodb mlab
        mongo_port = 27107
        db_name = 'comp4920'
        collection_name = 'users'
        mongo_host = "mongodb://admin:admin123@ds331558.mlab.com:31558/comp4920"
        client = MongoClient(host=mongo_host, port=mongo_port)
        db = client[db_name]
        users = db[collection_name]

        collection = db.users.find_one({"username": username})

        if not collection:
            api.abort(404, "User {} not found".format(username))

        output = {
            "username": collection['username'],
            "password": collection['password']
        }
        return output, 200


    def put(self, username, password):
        payload = request.form

        # Connect to mongodb mlab
        mongo_port = 27107
        db_name = 'comp4920'
        collection_name = 'users'
        mongo_host = "mongodb://admin:admin123@ds331558.mlab.com:31558/comp4920"
        client = MongoClient(host=mongo_host, port=mongo_port)
        db = client[db_name]
        users = db[collection_name]

        #collection = db.users.find_one({"username": username})

        new_entry = {
            "username": payload['username'],
            "password": payload['password']
        }

        #updateEntry(new_entry, exercises, {"id": exercise_id})

        return new_entry, 200, None
>>>>>>> Stashed changes


# Method used by developers only. Exercises will not be generated by the user
# def post(self)

if __name__ == '__main__':
    app.run(port=5001, debug=True)